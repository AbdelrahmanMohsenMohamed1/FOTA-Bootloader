
Bootloader_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f8  080026f8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f8  080026f8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000030  0800272c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800272c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d374  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b0  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181d6  00000000  00000000  00030e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ef  00000000  00000000  0004900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afd4  00000000  00000000  000578fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e28d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f4  00000000  00000000  000e2924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b4 	.word	0x080026b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080026b4 	.word	0x080026b4

0800014c <Bootloader_enumRecHostCommands>:
static void BL_Send_ACK(uint8_t dataLen);
static void BL_Send_NACK();
static uint8_t Host_buffer[HOSTM_MAX_SIZE];

BL_status Bootloader_enumRecHostCommands()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_status status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_status=HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t DataLen=71;
 800015a:	2347      	movs	r3, #71	; 0x47
 800015c:	717b      	strb	r3, [r7, #5]
	memset(Host_buffer,0,HOSTM_MAX_SIZE);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	480f      	ldr	r0, [pc, #60]	; (80001a0 <Bootloader_enumRecHostCommands+0x54>)
 8000164:	f002 fa9e 	bl	80026a4 <memset>
	Hal_status = HAL_UART_Receive(&huart2,Host_buffer,DataLen,1000);
 8000168:	797b      	ldrb	r3, [r7, #5]
 800016a:	b29a      	uxth	r2, r3
 800016c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000170:	490b      	ldr	r1, [pc, #44]	; (80001a0 <Bootloader_enumRecHostCommands+0x54>)
 8000172:	480c      	ldr	r0, [pc, #48]	; (80001a4 <Bootloader_enumRecHostCommands+0x58>)
 8000174:	f002 f8e3 	bl	800233e <HAL_UART_Receive>
 8000178:	4603      	mov	r3, r0
 800017a:	71bb      	strb	r3, [r7, #6]
	if(Hal_status != HAL_OK)
 800017c:	79bb      	ldrb	r3, [r7, #6]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d002      	beq.n	8000188 <Bootloader_enumRecHostCommands+0x3c>
	{
		status = BL_NACK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	e006      	b.n	8000196 <Bootloader_enumRecHostCommands+0x4a>
	}
	else{
		if(Host_buffer[1] == CBL_MEM_WRITE_CMD)
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <Bootloader_enumRecHostCommands+0x54>)
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	2b16      	cmp	r3, #22
 800018e:	d102      	bne.n	8000196 <Bootloader_enumRecHostCommands+0x4a>
		{
			BL_Write_Data(Host_buffer);
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <Bootloader_enumRecHostCommands+0x54>)
 8000192:	f000 f809 	bl	80001a8 <BL_Write_Data>
		else
		{

		}
	}
	return status;
 8000196:	79fb      	ldrb	r3, [r7, #7]
}
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	20000178 	.word	0x20000178

080001a8 <BL_Write_Data>:

uint16_t i=0;
static void BL_Write_Data(uint8_t *Host_buffer)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	uint8_t Adress_varfiy=ADDRESS_IS_INVALID;
 80001b0:	2300      	movs	r3, #0
 80001b2:	72fb      	strb	r3, [r7, #11]
	uint32_t Address_Host=0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
	uint8_t DataLen=0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 80001bc:	2300      	movs	r3, #0
 80001be:	72bb      	strb	r3, [r7, #10]
	//uint16_t Host_Packet_Len=0;
	//uint32_t CRC_valu=0;
	//Host_Packet_Len =  Host_buffer[0]+1;
	//CRC_valu = *((uint32_t*)(Host_buffer+Host_Packet_Len -4));
	Address_Host = 0x08008000 + (64*i);
 80001c0:	4b1c      	ldr	r3, [pc, #112]	; (8000234 <BL_Write_Data+0x8c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80001c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80001cc:	019b      	lsls	r3, r3, #6
 80001ce:	617b      	str	r3, [r7, #20]
	i++;
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <BL_Write_Data+0x8c>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <BL_Write_Data+0x8c>)
 80001da:	801a      	strh	r2, [r3, #0]
	DataLen = Host_buffer[6];
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	799b      	ldrb	r3, [r3, #6]
 80001e0:	74fb      	strb	r3, [r7, #19]
	Adress_varfiy = BL_Address_Varification(Address_Host);
 80001e2:	6978      	ldr	r0, [r7, #20]
 80001e4:	f000 f82a 	bl	800023c <BL_Address_Varification>
 80001e8:	4603      	mov	r3, r0
 80001ea:	72fb      	strb	r3, [r7, #11]
	if(Adress_varfiy == ADDRESS_IS_VALID)
 80001ec:	7afb      	ldrb	r3, [r7, #11]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d113      	bne.n	800021a <BL_Write_Data+0x72>
	{

		uint16_t* pdata = (uint16_t*)(&Host_buffer[7]);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3307      	adds	r3, #7
 80001f6:	60fb      	str	r3, [r7, #12]
		payload_status = FlashMemory_Paylaod_Write(pdata,Address_Host,DataLen);
 80001f8:	7cfb      	ldrb	r3, [r7, #19]
 80001fa:	461a      	mov	r2, r3
 80001fc:	6979      	ldr	r1, [r7, #20]
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	f000 f894 	bl	800032c <FlashMemory_Paylaod_Write>
 8000204:	4603      	mov	r3, r0
 8000206:	72bb      	strb	r3, [r7, #10]
		HAL_UART_Transmit(&huart2,(uint8_t*)&payload_status,1,HAL_MAX_DELAY);
 8000208:	f107 010a 	add.w	r1, r7, #10
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	2201      	movs	r2, #1
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <BL_Write_Data+0x90>)
 8000214:	f002 f810 	bl	8002238 <HAL_UART_Transmit>
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)&Adress_varfiy,1,HAL_MAX_DELAY);
	}
}
 8000218:	e007      	b.n	800022a <BL_Write_Data+0x82>
		HAL_UART_Transmit(&huart2,(uint8_t*)&Adress_varfiy,1,HAL_MAX_DELAY);
 800021a:	f107 010b 	add.w	r1, r7, #11
 800021e:	f04f 33ff 	mov.w	r3, #4294967295
 8000222:	2201      	movs	r2, #1
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <BL_Write_Data+0x90>)
 8000226:	f002 f807 	bl	8002238 <HAL_UART_Transmit>
}
 800022a:	bf00      	nop
 800022c:	3718      	adds	r7, #24
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000114 	.word	0x20000114
 8000238:	20000178 	.word	0x20000178

0800023c <BL_Address_Varification>:

static uint8_t BL_Address_Varification(uint32_t Addresss)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	uint8_t Adress_varfiy=ADDRESS_IS_INVALID;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]
	if(Addresss>=FLASH_BASE &&Addresss<=STM32F103_FLASH_END)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800024e:	d306      	bcc.n	800025e <BL_Address_Varification+0x22>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <BL_Address_Varification+0x48>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d802      	bhi.n	800025e <BL_Address_Varification+0x22>
	{
		Adress_varfiy=ADDRESS_IS_VALID;
 8000258:	2301      	movs	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
 800025c:	e00c      	b.n	8000278 <BL_Address_Varification+0x3c>
	}
	else if(Addresss>=SRAM_BASE &&Addresss<=STM32F103_SRAM_END)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000264:	d306      	bcc.n	8000274 <BL_Address_Varification+0x38>
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a07      	ldr	r2, [pc, #28]	; (8000288 <BL_Address_Varification+0x4c>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d802      	bhi.n	8000274 <BL_Address_Varification+0x38>
	{
		Adress_varfiy=ADDRESS_IS_VALID;
 800026e:	2301      	movs	r3, #1
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e001      	b.n	8000278 <BL_Address_Varification+0x3c>
	}
	else{
		Adress_varfiy=ADDRESS_IS_INVALID;
 8000274:	2300      	movs	r3, #0
 8000276:	73fb      	strb	r3, [r7, #15]
	}
	return Adress_varfiy;
 8000278:	7bfb      	ldrb	r3, [r7, #15]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	08010000 	.word	0x08010000
 8000288:	20005000 	.word	0x20005000

0800028c <Bootloader_uint8FlashErase>:
{
	uint8_t ACk_value=SEND_NACK;
	HAL_UART_Transmit(&huart2,&ACk_value,sizeof(ACk_value),HAL_MAX_DELAY);
}
uint8_t Bootloader_uint8FlashErase(uint32_t PageAddress, uint8_t page_Number)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef Hal_status  = HAL_ERROR;
 8000298:	2301      	movs	r3, #1
 800029a:	77bb      	strb	r3, [r7, #30]
	uint32_t PageError =0;
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
	uint8_t PageStatus=INVALID_PAGE_NUMBER;
 80002a0:	2300      	movs	r3, #0
 80002a2:	77fb      	strb	r3, [r7, #31]
	if(page_Number>CBL_FLASH_MAX_PAGE_NUMBER)
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b10      	cmp	r3, #16
 80002a8:	d902      	bls.n	80002b0 <Bootloader_uint8FlashErase+0x24>
	{
		PageStatus=INVALID_PAGE_NUMBER;
 80002aa:	2300      	movs	r3, #0
 80002ac:	77fb      	strb	r3, [r7, #31]
 80002ae:	e035      	b.n	800031c <Bootloader_uint8FlashErase+0x90>
	}
	else
	{
		PageStatus=VALID_PAGE_NUMBER;
 80002b0:	2301      	movs	r3, #1
 80002b2:	77fb      	strb	r3, [r7, #31]
		if(page_Number<= (CBL_FLASH_MAX_PAGE_NUMBER - 1) || PageAddress == CBL_FLASH_MASS_ERASE)
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	2b0f      	cmp	r3, #15
 80002b8:	d902      	bls.n	80002c0 <Bootloader_uint8FlashErase+0x34>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2bff      	cmp	r3, #255	; 0xff
 80002be:	d12b      	bne.n	8000318 <Bootloader_uint8FlashErase+0x8c>
		{
			if(PageAddress ==CBL_FLASH_MASS_ERASE )
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2bff      	cmp	r3, #255	; 0xff
 80002c4:	d108      	bne.n	80002d8 <Bootloader_uint8FlashErase+0x4c>
			{
				pEraseInit.TypeErase =FLASH_TYPEERASE_PAGES;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = 0x8008000;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <Bootloader_uint8FlashErase+0x9c>)
 80002d0:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages =12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	61bb      	str	r3, [r7, #24]
 80002d6:	e007      	b.n	80002e8 <Bootloader_uint8FlashErase+0x5c>
			}
			else{
				pEraseInit.TypeErase =FLASH_TYPEERASE_PAGES;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 80002dc:	2301      	movs	r3, #1
 80002de:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = PageAddress;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages =page_Number;
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	61bb      	str	r3, [r7, #24]
			}
			HAL_FLASH_Unlock();
 80002e8:	f000 fd14 	bl	8000d14 <HAL_FLASH_Unlock>
			Hal_status = HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 80002ec:	f107 0208 	add.w	r2, r7, #8
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fdf4 	bl	8000ee4 <HAL_FLASHEx_Erase>
 80002fc:	4603      	mov	r3, r0
 80002fe:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 8000300:	f000 fd2e 	bl	8000d60 <HAL_FLASH_Lock>
			if(PageError == HAL_SUCCESSFUL_ERASE)
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800030a:	d102      	bne.n	8000312 <Bootloader_uint8FlashErase+0x86>
			{
				PageStatus=SUCCESSFUL_ERASE;
 800030c:	2303      	movs	r3, #3
 800030e:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 8000310:	e004      	b.n	800031c <Bootloader_uint8FlashErase+0x90>
			}
			else{
				PageStatus=UNSUCCESSFUL_ERASE;
 8000312:	2302      	movs	r3, #2
 8000314:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 8000316:	e001      	b.n	800031c <Bootloader_uint8FlashErase+0x90>
			}
		}
		else
		{
			PageStatus=INVALID_PAGE_NUMBER;
 8000318:	2300      	movs	r3, #0
 800031a:	77fb      	strb	r3, [r7, #31]
		}
	}
	return PageStatus;
 800031c:	7ffb      	ldrb	r3, [r7, #31]

}
 800031e:	4618      	mov	r0, r3
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	08008000 	.word	0x08008000

0800032c <FlashMemory_Paylaod_Write>:
uint8_t UpdataAdress=0;
static uint8_t FlashMemory_Paylaod_Write(uint16_t * pdata,uint32_t StartAddress,uint8_t Payloadlen)
{
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	4613      	mov	r3, r2
 8000338:	71fb      	strb	r3, [r7, #7]
	uint32_t Address=0;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
	UpdataAdress=0;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <FlashMemory_Paylaod_Write+0x90>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef Hal_status=HAL_ERROR;
 8000344:	2301      	movs	r3, #1
 8000346:	75fb      	strb	r3, [r7, #23]
	uint8_t payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 8000348:	2300      	movs	r3, #0
 800034a:	77fb      	strb	r3, [r7, #31]
	//Perform_Flash_Erase(0xff,12);


	for(uint8_t payload_count=0,UpdataAdress=0;payload_count<Payloadlen/2;payload_count++,UpdataAdress+=2)
 800034c:	2300      	movs	r3, #0
 800034e:	77bb      	strb	r3, [r7, #30]
 8000350:	2300      	movs	r3, #0
 8000352:	777b      	strb	r3, [r7, #29]
 8000354:	e026      	b.n	80003a4 <FlashMemory_Paylaod_Write+0x78>
	{
		Address =  StartAddress +UpdataAdress;
 8000356:	7f7b      	ldrb	r3, [r7, #29]
 8000358:	68ba      	ldr	r2, [r7, #8]
 800035a:	4413      	add	r3, r2
 800035c:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Unlock();
 800035e:	f000 fcd9 	bl	8000d14 <HAL_FLASH_Unlock>
		Hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,pdata[payload_count]);
 8000362:	7fbb      	ldrb	r3, [r7, #30]
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4413      	add	r3, r2
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	b29b      	uxth	r3, r3
 800036e:	2200      	movs	r2, #0
 8000370:	461c      	mov	r4, r3
 8000372:	4615      	mov	r5, r2
 8000374:	4622      	mov	r2, r4
 8000376:	462b      	mov	r3, r5
 8000378:	69b9      	ldr	r1, [r7, #24]
 800037a:	2001      	movs	r0, #1
 800037c:	f000 fc5a 	bl	8000c34 <HAL_FLASH_Program>
 8000380:	4603      	mov	r3, r0
 8000382:	75fb      	strb	r3, [r7, #23]
		HAL_FLASH_Lock();
 8000384:	f000 fcec 	bl	8000d60 <HAL_FLASH_Lock>
		//HAL_FLASH_Lock();
		if(Hal_status != HAL_OK)
 8000388:	7dfb      	ldrb	r3, [r7, #23]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d002      	beq.n	8000394 <FlashMemory_Paylaod_Write+0x68>
		{
			payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 800038e:	2300      	movs	r3, #0
 8000390:	77fb      	strb	r3, [r7, #31]
 8000392:	e001      	b.n	8000398 <FlashMemory_Paylaod_Write+0x6c>
		}
		else{
			payload_status =FLASH_PAYLOAD_WRITE_PASSED;
 8000394:	2301      	movs	r3, #1
 8000396:	77fb      	strb	r3, [r7, #31]
	for(uint8_t payload_count=0,UpdataAdress=0;payload_count<Payloadlen/2;payload_count++,UpdataAdress+=2)
 8000398:	7fbb      	ldrb	r3, [r7, #30]
 800039a:	3301      	adds	r3, #1
 800039c:	77bb      	strb	r3, [r7, #30]
 800039e:	7f7b      	ldrb	r3, [r7, #29]
 80003a0:	3302      	adds	r3, #2
 80003a2:	777b      	strb	r3, [r7, #29]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	085b      	lsrs	r3, r3, #1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	7fba      	ldrb	r2, [r7, #30]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3d2      	bcc.n	8000356 <FlashMemory_Paylaod_Write+0x2a>
		}
	}

	return payload_status;
 80003b0:	7ffb      	ldrb	r3, [r7, #31]

}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bdb0      	pop	{r4, r5, r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000116 	.word	0x20000116

080003c0 <Bootloader_voidJumpToApp>:

#define FLASH_SECTOR2_BASE_ADDRESS   0x08008000U
typedef void (*pMainApp)(void);
void Bootloader_voidJumpToApp()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <Bootloader_voidJumpToApp+0x34>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	60fb      	str	r3, [r7, #12]
	uint32_t MainAppAdd = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+4));
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <Bootloader_voidJumpToApp+0x38>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	60bb      	str	r3, [r7, #8]

	pMainApp ResetHandler_Address=(pMainApp)MainAppAdd;
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	607b      	str	r3, [r7, #4]
	HAL_RCC_DeInit();
 80003d6:	f000 ffc9 	bl	800136c <HAL_RCC_DeInit>
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	f383 8808 	msr	MSP, r3
}
 80003e4:	bf00      	nop
	__set_MSP(MSP_Value);
	ResetHandler_Address();
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08008000 	.word	0x08008000
 80003f8:	08008004 	.word	0x08008004

080003fc <Bootloader_voidCheckStartCommand>:
uint8_t check[16]="Bootloader Start";
uint8_t Erase[16]="Bootloader Ereas";
uint8_t start[16]={0};
uint8_t flag=0;
uint8_t Bootloader_voidCheckStartCommand()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	uint8_t count=0;
 8000402:	2300      	movs	r3, #0
 8000404:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart2, start, sizeof(check), 100);
 8000406:	2364      	movs	r3, #100	; 0x64
 8000408:	2210      	movs	r2, #16
 800040a:	491d      	ldr	r1, [pc, #116]	; (8000480 <Bootloader_voidCheckStartCommand+0x84>)
 800040c:	481d      	ldr	r0, [pc, #116]	; (8000484 <Bootloader_voidCheckStartCommand+0x88>)
 800040e:	f001 ff96 	bl	800233e <HAL_UART_Receive>

	while(check[count]!='\0')
 8000412:	e00a      	b.n	800042a <Bootloader_voidCheckStartCommand+0x2e>
	{
		if(start[count] != check[count])
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <Bootloader_voidCheckStartCommand+0x84>)
 8000418:	5cd2      	ldrb	r2, [r2, r3]
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	491a      	ldr	r1, [pc, #104]	; (8000488 <Bootloader_voidCheckStartCommand+0x8c>)
 800041e:	5ccb      	ldrb	r3, [r1, r3]
 8000420:	429a      	cmp	r2, r3
 8000422:	d108      	bne.n	8000436 <Bootloader_voidCheckStartCommand+0x3a>
			break;
		count++;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	3301      	adds	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]
	while(check[count]!='\0')
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <Bootloader_voidCheckStartCommand+0x8c>)
 800042e:	5cd3      	ldrb	r3, [r2, r3]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1ef      	bne.n	8000414 <Bootloader_voidCheckStartCommand+0x18>
 8000434:	e000      	b.n	8000438 <Bootloader_voidCheckStartCommand+0x3c>
			break;
 8000436:	bf00      	nop
	}
	if(count == 16)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b10      	cmp	r3, #16
 800043c:	d101      	bne.n	8000442 <Bootloader_voidCheckStartCommand+0x46>
		return 1;
 800043e:	2301      	movs	r3, #1
 8000440:	e01a      	b.n	8000478 <Bootloader_voidCheckStartCommand+0x7c>

	else{
		count=0;
 8000442:	2300      	movs	r3, #0
 8000444:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 8000446:	e00a      	b.n	800045e <Bootloader_voidCheckStartCommand+0x62>
		{
			if(start[count] != Erase[count])
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <Bootloader_voidCheckStartCommand+0x84>)
 800044c:	5cd2      	ldrb	r2, [r2, r3]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	490e      	ldr	r1, [pc, #56]	; (800048c <Bootloader_voidCheckStartCommand+0x90>)
 8000452:	5ccb      	ldrb	r3, [r1, r3]
 8000454:	429a      	cmp	r2, r3
 8000456:	d108      	bne.n	800046a <Bootloader_voidCheckStartCommand+0x6e>
				break;
			count++;
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	3301      	adds	r3, #1
 800045c:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4a0a      	ldr	r2, [pc, #40]	; (800048c <Bootloader_voidCheckStartCommand+0x90>)
 8000462:	5cd3      	ldrb	r3, [r2, r3]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1ef      	bne.n	8000448 <Bootloader_voidCheckStartCommand+0x4c>
 8000468:	e000      	b.n	800046c <Bootloader_voidCheckStartCommand+0x70>
				break;
 800046a:	bf00      	nop
		}
		if(count == 16)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b10      	cmp	r3, #16
 8000470:	d101      	bne.n	8000476 <Bootloader_voidCheckStartCommand+0x7a>
			return 2;
 8000472:	2302      	movs	r3, #2
 8000474:	e000      	b.n	8000478 <Bootloader_voidCheckStartCommand+0x7c>
	}
	return 0;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000118 	.word	0x20000118
 8000484:	20000178 	.word	0x20000178
 8000488:	20000000 	.word	0x20000000
 800048c:	20000010 	.word	0x20000010

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000496:	f000 fa41 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049a:	f000 f829 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049e:	f000 f8f1 	bl	8000684 <MX_GPIO_Init>
  MX_CRC_Init();
 80004a2:	f000 f861 	bl	8000568 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80004a6:	f000 f8c3 	bl	8000630 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004aa:	f000 f871 	bl	8000590 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t Flag1=0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseState=0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Jump_Application();
		uint8_t d=Bootloader_voidCheckStartCommand();
 80004b6:	f7ff ffa1 	bl	80003fc <Bootloader_voidCheckStartCommand>
 80004ba:	4603      	mov	r3, r0
 80004bc:	717b      	strb	r3, [r7, #5]
		if(Flag1 == 0)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d107      	bne.n	80004d4 <main+0x44>
		{
			Flag1=1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	71fb      	strb	r3, [r7, #7]
			EraseState = Bootloader_uint8FlashErase(0xff,12);
 80004c8:	210c      	movs	r1, #12
 80004ca:	20ff      	movs	r0, #255	; 0xff
 80004cc:	f7ff fede 	bl	800028c <Bootloader_uint8FlashErase>
 80004d0:	4603      	mov	r3, r0
 80004d2:	71bb      	strb	r3, [r7, #6]
		}
		if(Flag3==1)
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <main+0x5c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d101      	bne.n	80004e0 <main+0x50>
		{
			Bootloader_voidJumpToApp();
 80004dc:	f7ff ff70 	bl	80003c0 <Bootloader_voidJumpToApp>
		if(State == GPIO_PIN_SET)
		{
			Jump_Application();
		}*/
		//uint8_t d=Bootloader_voidCheckStartCommand();
		if(d== 1)
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d1e7      	bne.n	80004b6 <main+0x26>
			{
				Flag1=1;
				EraseState = Perform_Flash_Erase(0xff,12);
			}*/

			Bootloader_enumRecHostCommands();
 80004e6:	f7ff fe31 	bl	800014c <Bootloader_enumRecHostCommands>
	{
 80004ea:	e7e4      	b.n	80004b6 <main+0x26>
 80004ec:	200001c0 	.word	0x200001c0

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b090      	sub	sp, #64	; 0x40
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2228      	movs	r2, #40	; 0x28
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 f8d0 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2310      	movs	r3, #16
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f000 ffba 	bl	80014a0 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000532:	f000 f8eb 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fa28 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800055a:	f000 f8d7 	bl	800070c <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3740      	adds	r7, #64	; 0x40
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_CRC_Init+0x20>)
 800056e:	4a07      	ldr	r2, [pc, #28]	; (800058c <MX_CRC_Init+0x24>)
 8000570:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_CRC_Init+0x20>)
 8000574:	f000 fb41 	bl	8000bfa <HAL_CRC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800057e:	f000 f8c5 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000128 	.word	0x20000128
 800058c:	40023000 	.word	0x40023000

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_TIM1_Init+0x98>)
 80005ae:	4a1f      	ldr	r2, [pc, #124]	; (800062c <MX_TIM1_Init+0x9c>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_TIM1_Init+0x98>)
 80005b4:	229f      	movs	r2, #159	; 0x9f
 80005b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_TIM1_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_TIM1_Init+0x98>)
 80005c0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80005c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_TIM1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_TIM1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_TIM1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <MX_TIM1_Init+0x98>)
 80005da:	f001 fb71 	bl	8001cc0 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80005e4:	f000 f892 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	4619      	mov	r1, r3
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_TIM1_Init+0x98>)
 80005f6:	f001 fbb2 	bl	8001d5e <HAL_TIM_ConfigClockSource>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000600:	f000 f884 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_TIM1_Init+0x98>)
 8000612:	f001 fd63 	bl	80020dc <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800061c:	f000 f876 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000130 	.word	0x20000130
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f001 fd96 	bl	8002198 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f84b 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000178 	.word	0x20000178
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_GPIO_Init+0x5c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x5c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x5c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x60>)
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x64>)
 80006c4:	f000 fcb6 	bl	8001034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2006      	movs	r0, #6
 80006ce:	f000 fa5e 	bl	8000b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d2:	2006      	movs	r0, #6
 80006d4:	f000 fa77 	bl	8000bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	10110000 	.word	0x10110000
 80006e8:	40010800 	.word	0x40010800

080006ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	//Jump_Application();
	Flag3=1;
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
	//Jump_Application();
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200001c0 	.word	0x200001c0

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_MspInit+0x40>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <HAL_MspInit+0x40>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_MspInit+0x40>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_MspInit+0x40>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_MspInit+0x40>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_MspInit+0x40>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <HAL_CRC_MspInit+0x34>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_CRC_MspInit+0x38>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_CRC_MspInit+0x38>)
 8000774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_CRC_MspInit+0x38>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40023000 	.word	0x40023000
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10b      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_TIM_Base_MspInit+0x38>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_TIM_Base_MspInit+0x38>)
 80007b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_TIM_Base_MspInit+0x38>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <HAL_UART_MspInit+0x88>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d12f      	bne.n	8000854 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_UART_MspInit+0x8c>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x8c>)
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x8c>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_UART_MspInit+0x8c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000824:	2304      	movs	r3, #4
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000838:	f000 fbfc 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000850:	f000 fbf0 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f87b 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fd3e 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d0:	f7ff fff8 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d6:	490c      	ldr	r1, [pc, #48]	; (8000908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ec:	4c09      	ldr	r4, [pc, #36]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 feaf 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fdc7 	bl	8000490 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800090c:	08002700 	.word	0x08002700
  ldr r2, =_sbss
 8000910:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000914:	200001e8 	.word	0x200001e8

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x28>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x28>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f923 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff feee 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f93b 	bl	8000be2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f903 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000020 	.word	0x20000020
 80009a0:	20000028 	.word	0x20000028
 80009a4:	20000024 	.word	0x20000024

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000028 	.word	0x20000028
 80009c8:	200001c4 	.word	0x200001c4

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	200001c4 	.word	0x200001c4

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <__NVIC_EnableIRQ+0x34>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff2d 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff42 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff35 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e00e      	b.n	8000c2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fd9d 	bl	800075c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2201      	movs	r2, #1
 8000c26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_FLASH_Program+0xd8>)
 8000c50:	7e1b      	ldrb	r3, [r3, #24]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d101      	bne.n	8000c5a <HAL_FLASH_Program+0x26>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e054      	b.n	8000d04 <HAL_FLASH_Program+0xd0>
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <HAL_FLASH_Program+0xd8>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c64:	f000 f8a8 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d144      	bne.n	8000cfc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d102      	bne.n	8000c7e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	757b      	strb	r3, [r7, #21]
 8000c7c:	e007      	b.n	8000c8e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d102      	bne.n	8000c8a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c84:	2302      	movs	r3, #2
 8000c86:	757b      	strb	r3, [r7, #21]
 8000c88:	e001      	b.n	8000c8e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	75bb      	strb	r3, [r7, #22]
 8000c92:	e02d      	b.n	8000cf0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c94:	7dbb      	ldrb	r3, [r7, #22]
 8000c96:	005a      	lsls	r2, r3, #1
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	eb02 0c03 	add.w	ip, r2, r3
 8000c9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ca0:	0119      	lsls	r1, r3, #4
 8000ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca6:	f1c1 0620 	rsb	r6, r1, #32
 8000caa:	f1a1 0020 	sub.w	r0, r1, #32
 8000cae:	fa22 f401 	lsr.w	r4, r2, r1
 8000cb2:	fa03 f606 	lsl.w	r6, r3, r6
 8000cb6:	4334      	orrs	r4, r6
 8000cb8:	fa23 f000 	lsr.w	r0, r3, r0
 8000cbc:	4304      	orrs	r4, r0
 8000cbe:	fa23 f501 	lsr.w	r5, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4660      	mov	r0, ip
 8000cc8:	f000 f85a 	bl	8000d80 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ccc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cd0:	f000 f872 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_FLASH_Program+0xdc>)
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_FLASH_Program+0xdc>)
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d107      	bne.n	8000cfa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cea:	7dbb      	ldrb	r3, [r7, #22]
 8000cec:	3301      	adds	r3, #1
 8000cee:	75bb      	strb	r3, [r7, #22]
 8000cf0:	7dba      	ldrb	r2, [r7, #22]
 8000cf2:	7d7b      	ldrb	r3, [r7, #21]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d3cd      	bcc.n	8000c94 <HAL_FLASH_Program+0x60>
 8000cf8:	e000      	b.n	8000cfc <HAL_FLASH_Program+0xc8>
      {
        break;
 8000cfa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_FLASH_Program+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	761a      	strb	r2, [r3, #24]

  return status;
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0c:	200001c8 	.word	0x200001c8
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_FLASH_Unlock+0x40>)
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00d      	beq.n	8000d46 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_FLASH_Unlock+0x40>)
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_FLASH_Unlock+0x44>)
 8000d2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_FLASH_Unlock+0x40>)
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_FLASH_Unlock+0x48>)
 8000d34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_FLASH_Unlock+0x40>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40022000 	.word	0x40022000
 8000d58:	45670123 	.word	0x45670123
 8000d5c:	cdef89ab 	.word	0xcdef89ab

08000d60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_FLASH_Lock+0x1c>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_FLASH_Lock+0x1c>)
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <FLASH_Program_HalfWord+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <FLASH_Program_HalfWord+0x34>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x34>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	887a      	ldrh	r2, [r7, #2]
 8000da2:	801a      	strh	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200001c8 	.word	0x200001c8
 8000db4:	40022000 	.word	0x40022000

08000db8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fe04 	bl	80009cc <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dc6:	e010      	b.n	8000dea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dce:	d00c      	beq.n	8000dea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <FLASH_WaitForLastOperation+0x2e>
 8000dd6:	f7ff fdf9 	bl	80009cc <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d201      	bcs.n	8000dea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e025      	b.n	8000e36 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1e8      	bne.n	8000dc8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d105      	bne.n	8000e2c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e2c:	f000 f80a 	bl	8000e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e84:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000ea4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f240 1201 	movw	r2, #257	; 0x101
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <FLASH_SetErrorCode+0x86>
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	61d3      	str	r3, [r2, #28]
}  
 8000ec8:	e002      	b.n	8000ed0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60d3      	str	r3, [r2, #12]
}  
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000
 8000ee0:	200001c8 	.word	0x200001c8

08000ee4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000ef8:	7e1b      	ldrb	r3, [r3, #24]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_FLASHEx_Erase+0x1e>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e053      	b.n	8000faa <HAL_FLASHEx_Erase+0xc6>
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d116      	bne.n	8000f3e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f14:	f7ff ff50 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d141      	bne.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 f84c 	bl	8000fbc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f28:	f7ff ff46 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f36:	f023 0304 	bic.w	r3, r3, #4
 8000f3a:	6113      	str	r3, [r2, #16]
 8000f3c:	e031      	b.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f42:	f7ff ff39 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d12a      	bne.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e019      	b.n	8000f90 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f000 f849 	bl	8000ff4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f66:	f7ff ff27 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f74:	f023 0302 	bic.w	r3, r3, #2
 8000f78:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	601a      	str	r2, [r3, #0]
            break;
 8000f86:	e00c      	b.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f8e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	029a      	lsls	r2, r3, #10
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3dc      	bcc.n	8000f5c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	761a      	strb	r2, [r3, #24]

  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001c8 	.word	0x200001c8
 8000fb8:	40022000 	.word	0x40022000

08000fbc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <FLASH_MassErase+0x30>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	200001c8 	.word	0x200001c8
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <FLASH_PageErase+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <FLASH_PageErase+0x3c>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <FLASH_PageErase+0x3c>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <FLASH_PageErase+0x3c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <FLASH_PageErase+0x3c>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a05      	ldr	r2, [pc, #20]	; (8001030 <FLASH_PageErase+0x3c>)
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200001c8 	.word	0x200001c8
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e169      	b.n	800131c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8158 	bne.w	8001316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a9a      	ldr	r2, [pc, #616]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d05e      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001070:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d875      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001076:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d058      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 800107c:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d86f      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001082:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d052      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d869      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800108e:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d04c      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d863      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800109a:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d046      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 80010a0:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d85d      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d82a      	bhi.n	8001100 <HAL_GPIO_Init+0xcc>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d859      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_GPIO_Init+0x80>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	08001109 	.word	0x08001109
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	0800115d 	.word	0x0800115d
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001125 	.word	0x08001125
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <HAL_GPIO_Init+0x2b4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001106:	e02c      	b.n	8001162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e029      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e024      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	3308      	adds	r3, #8
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e01f      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	330c      	adds	r3, #12
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e01a      	b.n	8001164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e013      	b.n	8001164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	611a      	str	r2, [r3, #16]
          break;
 800114e:	e009      	b.n	8001164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	615a      	str	r2, [r3, #20]
          break;
 800115a:	e003      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x130>
          break;
 8001162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <HAL_GPIO_Init+0x13a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d802      	bhi.n	8001180 <HAL_GPIO_Init+0x14c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x152>
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3b08      	subs	r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	210f      	movs	r1, #15
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	431a      	orrs	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b1 	beq.w	8001316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e0>
 8001210:	2303      	movs	r3, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001214:	2304      	movs	r3, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001218:	2302      	movs	r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001220:	2300      	movs	r3, #0
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4093      	lsls	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4918      	ldr	r1, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x2e2>
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_GPIO_Init+0x304>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001312:	4013      	ands	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae8e 	bne.w	8001048 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f9c6 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001372:	f7ff fb2b 	bl	80009cc <HAL_GetTick>
 8001376:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb21 	bl	80009cc <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e077      	b.n	8001488 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_RCC_DeInit+0x124>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013ac:	4a38      	ldr	r2, [pc, #224]	; (8001490 <HAL_RCC_DeInit+0x124>)
 80013ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fb0a 	bl	80009cc <HAL_GetTick>
 80013b8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_RCC_DeInit+0x124>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f7ff fb03 	bl	80009cc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e057      	b.n	8001488 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_DeInit+0x124>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_DeInit+0x128>)
 80013e6:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_RCC_DeInit+0x12c>)
 80013e8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_RCC_DeInit+0x130>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff faaa 	bl	8000948 <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e044      	b.n	8001488 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013fe:	f7ff fae5 	bl	80009cc <HAL_GetTick>
 8001402:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800140a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fadb 	bl	80009cc <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e031      	b.n	8001488 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001436:	f7ff fac9 	bl	80009cc <HAL_GetTick>
 800143a:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001442:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001446:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144a:	f7ff fabf 	bl	80009cc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	d901      	bls.n	800145c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e015      	b.n	8001488 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_RCC_DeInit+0x124>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_RCC_DeInit+0x124>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	20000020 	.word	0x20000020
 8001498:	007a1200 	.word	0x007a1200
 800149c:	20000024 	.word	0x20000024

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e272      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8087 	beq.w	80015ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d00c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014cc:	4b8f      	ldr	r3, [pc, #572]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d112      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
 80014d8:	4b8c      	ldr	r3, [pc, #560]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06c      	beq.n	80015cc <HAL_RCC_OscConfig+0x12c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d168      	bne.n	80015cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e24c      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x76>
 8001508:	4b80      	ldr	r3, [pc, #512]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a7f      	ldr	r2, [pc, #508]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b7b      	ldr	r3, [pc, #492]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a7a      	ldr	r2, [pc, #488]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b78      	ldr	r3, [pc, #480]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a77      	ldr	r2, [pc, #476]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0xbc>
 8001542:	4b72      	ldr	r3, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a71      	ldr	r2, [pc, #452]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6a      	ldr	r2, [pc, #424]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a67      	ldr	r2, [pc, #412]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fa26 	bl	80009cc <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fa22 	bl	80009cc <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e200      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xe4>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fa12 	bl	80009cc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fa0e 	bl	80009cc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1ec      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x10c>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	4b4c      	ldr	r3, [pc, #304]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c0      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4939      	ldr	r1, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff f9c7 	bl	80009cc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff f9c3 	bl	80009cc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1a1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f9a6 	bl	80009cc <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff f9a2 	bl	80009cc <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e180      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03a      	beq.n	8001724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d019      	beq.n	80016ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff f986 	bl	80009cc <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff f982 	bl	80009cc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e160      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 face 	bl	8001c84 <RCC_Delay>
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f96c 	bl	80009cc <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f6:	e00f      	b.n	8001718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff f968 	bl	80009cc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d908      	bls.n	8001718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e146      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	42420000 	.word	0x42420000
 8001714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e9      	bne.n	80016f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a6 	beq.w	800187e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10d      	bne.n	800175e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a87      	ldr	r2, [pc, #540]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff f929 	bl	80009cc <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff f925 	bl	80009cc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e103      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b75      	ldr	r3, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x312>
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e02d      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017ba:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	e01c      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x356>
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a5a      	ldr	r2, [pc, #360]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b58      	ldr	r3, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d015      	beq.n	8001842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f8d9 	bl	80009cc <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f8d5 	bl	80009cc <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0b1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ee      	beq.n	800181e <HAL_RCC_OscConfig+0x37e>
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f8c3 	bl	80009cc <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff f8bf 	bl	80009cc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e09b      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b40      	ldr	r3, [pc, #256]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d061      	beq.n	8001958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d146      	bne.n	800192a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x4cc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f893 	bl	80009cc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f88f 	bl	80009cc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e06d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d108      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4921      	ldr	r1, [pc, #132]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a19      	ldr	r1, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	430b      	orrs	r3, r1
 80018f6:	491b      	ldr	r1, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x4cc>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f863 	bl	80009cc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f85f 	bl	80009cc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x46a>
 8001928:	e035      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x4cc>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f84c 	bl	80009cc <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f848 	bl	80009cc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e026      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x498>
 8001956:	e01e      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e019      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_OscConfig+0x500>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	429a      	cmp	r2, r3
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0d0      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4965      	ldr	r1, [pc, #404]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d040      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e073      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4936      	ldr	r1, [pc, #216]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7fe ff9a 	bl	80009cc <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7fe ff96 	bl	80009cc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e053      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d210      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	4922      	ldr	r1, [pc, #136]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1cc>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fef8 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080026cc 	.word	0x080026cc
 8001b70:	20000020 	.word	0x20000020
 8001b74:	20000024 	.word	0x20000024

08001b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x36>
 8001ba6:	e027      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	613b      	str	r3, [r7, #16]
      break;
 8001bac:	e027      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0c5b      	lsrs	r3, r3, #17
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e004      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	613b      	str	r3, [r7, #16]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	693b      	ldr	r3, [r7, #16]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	007a1200 	.word	0x007a1200
 8001c14:	080026e4 	.word	0x080026e4
 8001c18:	080026f4 	.word	0x080026f4
 8001c1c:	003d0900 	.word	0x003d0900

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000020 	.word	0x20000020

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff2 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	080026dc 	.word	0x080026dc

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	080026dc 	.word	0x080026dc

08001c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <RCC_Delay+0x34>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <RCC_Delay+0x38>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0a5b      	lsrs	r3, r3, #9
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca0:	bf00      	nop
  }
  while (Delay --);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	60fa      	str	r2, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <RCC_Delay+0x1c>
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000020 	.word	0x20000020
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e041      	b.n	8001d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fd56 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f000 f8f4 	bl	8001eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_ConfigClockSource+0x1c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0b4      	b.n	8001ee4 <HAL_TIM_ConfigClockSource+0x186>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d03e      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0xd4>
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db8:	f200 8087 	bhi.w	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc0:	f000 8086 	beq.w	8001ed0 <HAL_TIM_ConfigClockSource+0x172>
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc8:	d87f      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dca:	2b70      	cmp	r3, #112	; 0x70
 8001dcc:	d01a      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0xa6>
 8001dce:	2b70      	cmp	r3, #112	; 0x70
 8001dd0:	d87b      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dd2:	2b60      	cmp	r3, #96	; 0x60
 8001dd4:	d050      	beq.n	8001e78 <HAL_TIM_ConfigClockSource+0x11a>
 8001dd6:	2b60      	cmp	r3, #96	; 0x60
 8001dd8:	d877      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dda:	2b50      	cmp	r3, #80	; 0x50
 8001ddc:	d03c      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0xfa>
 8001dde:	2b50      	cmp	r3, #80	; 0x50
 8001de0:	d873      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d058      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x13a>
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d86f      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dea:	2b30      	cmp	r3, #48	; 0x30
 8001dec:	d064      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x15a>
 8001dee:	2b30      	cmp	r3, #48	; 0x30
 8001df0:	d86b      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d060      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x15a>
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d867      	bhi.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d05c      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x15a>
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d05a      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0x15a>
 8001e02:	e062      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f000 f943 	bl	800209e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	609a      	str	r2, [r3, #8]
      break;
 8001e30:	e04f      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f000 f92c 	bl	800209e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e54:	609a      	str	r2, [r3, #8]
      break;
 8001e56:	e03c      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f000 f8a3 	bl	8001fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2150      	movs	r1, #80	; 0x50
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f8fa 	bl	800206a <TIM_ITRx_SetConfig>
      break;
 8001e76:	e02c      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f000 f8c1 	bl	800200c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2160      	movs	r1, #96	; 0x60
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f8ea 	bl	800206a <TIM_ITRx_SetConfig>
      break;
 8001e96:	e01c      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f000 f883 	bl	8001fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f8da 	bl	800206a <TIM_ITRx_SetConfig>
      break;
 8001eb6:	e00c      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 f8d1 	bl	800206a <TIM_ITRx_SetConfig>
      break;
 8001ec8:	e003      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ece:	e000      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ed0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <TIM_Base_SetConfig+0xbc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <TIM_Base_SetConfig+0xbc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d103      	bne.n	8001f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	615a      	str	r2, [r3, #20]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800

08001fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	f023 0201 	bic.w	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f023 030a 	bic.w	r3, r3, #10
 8001fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	621a      	str	r2, [r3, #32]
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	f023 0210 	bic.w	r2, r3, #16
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	031b      	lsls	r3, r3, #12
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002048:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	621a      	str	r2, [r3, #32]
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	f043 0307 	orr.w	r3, r3, #7
 800208c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	021a      	lsls	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	609a      	str	r2, [r3, #8]
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e046      	b.n	8002182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00e      	beq.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d009      	beq.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10c      	bne.n	8002170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800215c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4313      	orrs	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800

08002198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e042      	b.n	8002230 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fb08 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f9af 	bl	8002540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	d16d      	bne.n	8002334 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_UART_Transmit+0x2c>
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e066      	b.n	8002336 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002276:	f7fe fba9 	bl	80009cc <HAL_GetTick>
 800227a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d108      	bne.n	80022a4 <HAL_UART_Transmit+0x6c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	e003      	b.n	80022ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022ac:	e02a      	b.n	8002304 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f8d2 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e036      	b.n	8002336 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e007      	b.n	80022f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1cf      	bne.n	80022ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f8a2 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08a      	sub	sp, #40	; 0x28
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	d17c      	bne.n	8002458 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_Receive+0x2c>
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e075      	b.n	800245a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2222      	movs	r2, #34	; 0x22
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002382:	f7fe fb23 	bl	80009cc <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Receive+0x72>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023b8:	e043      	b.n	8002442 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2120      	movs	r1, #32
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f84c 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e042      	b.n	800245a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	3302      	adds	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e01f      	b.n	8002434 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d007      	beq.n	800240e <HAL_UART_Receive+0xd0>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_UART_Receive+0xde>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e008      	b.n	800242e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002428:	b2da      	uxtb	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1b6      	bne.n	80023ba <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b090      	sub	sp, #64	; 0x40
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	e050      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d04c      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800247c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
 8002482:	f7fe faa3 	bl	80009cc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800248e:	429a      	cmp	r2, r3
 8002490:	d241      	bcs.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b2:	637a      	str	r2, [r7, #52]	; 0x34
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e5      	bne.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3314      	adds	r3, #20
 80024cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	e853 3f00 	ldrex	r3, [r3]
 80024d4:	613b      	str	r3, [r7, #16]
   return(result);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3314      	adds	r3, #20
 80024e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e6:	623a      	str	r2, [r7, #32]
 80024e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	69f9      	ldr	r1, [r7, #28]
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	e841 2300 	strex	r3, r2, [r1]
 80024f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e5      	bne.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e00f      	b.n	8002536 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4013      	ands	r3, r2
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	429a      	cmp	r2, r3
 8002532:	d09f      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3740      	adds	r7, #64	; 0x40
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800257a:	f023 030c 	bic.w	r3, r3, #12
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <UART_SetConfig+0x114>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025a8:	f7ff fb58 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	e002      	b.n	80025b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025b0:	f7ff fb40 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <UART_SetConfig+0x118>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	0119      	lsls	r1, r3, #4
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <UART_SetConfig+0x118>)
 80025ee:	fba3 0302 	umull	r0, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2064      	movs	r0, #100	; 0x64
 80025f6:	fb00 f303 	mul.w	r3, r0, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	3332      	adds	r3, #50	; 0x32
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <UART_SetConfig+0x118>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	4419      	add	r1, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009a      	lsls	r2, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fbb2 f2f3 	udiv	r2, r2, r3
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <UART_SetConfig+0x118>)
 8002626:	fba3 0302 	umull	r0, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2064      	movs	r0, #100	; 0x64
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	; 0x32
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <UART_SetConfig+0x118>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	440a      	add	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40013800 	.word	0x40013800
 8002658:	51eb851f 	.word	0x51eb851f

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	f000 f822 	bl	80026b4 <_init>
 8002670:	2600      	movs	r6, #0
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	080026f8 	.word	0x080026f8
 8002698:	080026f8 	.word	0x080026f8
 800269c:	080026f8 	.word	0x080026f8
 80026a0:	080026fc 	.word	0x080026fc

080026a4 <memset>:
 80026a4:	4603      	mov	r3, r0
 80026a6:	4402      	add	r2, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	f803 1b01 	strb.w	r1, [r3], #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	bf00      	nop
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
